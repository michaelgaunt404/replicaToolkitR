if (is.null(network_centroid_object)){
message("You elected to use folder and location pointers to make spaital object...")
# message("In addition, you elected to repersent network links as polylines....\nIf you wish to depict network as links as points using their centroids change 'use_centroids = T'")
network_centroid_object = here::here(location, folder, "replica_queried_network_cntds.gpkg") %>%
sf::read_sf()
} else {
message("Shapefile will be made using supplied network link object...")
network_centroid_object = network_centroid_object
}
message(str_glue("{make_space('-')}\nMaking shapefiles by merging data centroids with aggregated count data...."))
temp_object = c("agg_link_flag", "agg_link_vehicle_type", "agg_link_vehicle_type_origin") %>%
map(~{
message(str_glue("Making {.x}...."))
network_object_mrgd = network_centroid_object %>%
mutate(stableEdgeId_trunc = str_trunc(stableEdgeId, 14, "right", "")) %>%
merge(aggregated_network_links[[.x]] %>%
mutate(network_link_ids_unnested_trunc = str_trunc(network_link_ids_unnested , 14, "right", ""))
,by.x = "stableEdgeId_trunc", by.y = "network_link_ids_unnested_trunc", all = T)
# summary_output = network_object_mrgd %>%
#   st_drop_geometry() %>%
#   count(stable_mis = !is.na(stableEdgeId)
#         ,network_mis = !is.na(network_link_ids_unnested)) %>%
#   mutate(flag = case_when(
#     (stable_mis == T & network_mis == T)~"Successful data matches"
#     ,(stable_mis == F & network_mis == T)~"Agg. table link present but no match in network object"
#     ,(stable_mis == T & network_mis == F)~"Network object link present but no match in agg. table"
#     ,T~"ERROR")) %>%
#   select(flag, count = n)
# message(str_glue("{paste0(capture.output(summary_output), collapse = '\n')}"))
})
#save out
{
list_objects = list(agg_link_flag = temp_object[[1]]
,agg_link_vehicle_type = temp_object[[2]]
,agg_link_vehicle_type_origin = temp_object[[3]])
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "network_link_aggregation_list.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects, file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
yolo = make_agg_network_shapefile_centroids(
location = "data/req_dev"
,folder = "data_20230125_162034"
)
message(str_glue("{make_space('-')}\nMaking shapefiles by merging data centroids with aggregated count data"))
message("===This may take awhile depending on the size of the network and count data")
yolo = make_agg_network_shapefile_centroids(
aggregate_object = aggregated_network_links
,network_centroid_object = replica_queried_network_cntds
)
make_agg_network_shapefile_centroids = function(location, folder, auto_save = F
,aggregate_object = NULL, network_centroid_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230125_162034'
if (is.null(aggregate_object)){
message("Aggregate network links objects will be made using aggregate tables located at folder and location...")
aggregated_network_links = here::here(location, folder, "aggregated_network_links.rds") %>%
read_rds()
replica_trip_origin_links = aggregated_network_links
} else {
message("Aggregate network links objects will be made using supplied aggregate table...")
aggregated_network_links = aggregate_object
}
if (is.null(network_centroid_object)){
message("You elected to use folder and location pointers to make spaital object...")
# message("In addition, you elected to repersent network links as polylines....\nIf you wish to depict network as links as points using their centroids change 'use_centroids = T'")
network_centroid_object = here::here(location, folder, "replica_queried_network_cntds.gpkg") %>%
sf::read_sf()
} else {
message("Shapefile will be made using supplied network link object...")
network_centroid_object = network_centroid_object
}
message(str_glue("Making shapefiles by merging data centroids with aggregated count data{make_space('-')}"))
message("===This may take awhile depending on the size of the network and count data")
temp_object = c("agg_link_flag", "agg_link_vehicle_type", "agg_link_vehicle_type_origin") %>%
map(~{
message(str_glue("Making {.x}...."))
network_object_mrgd = network_centroid_object %>%
mutate(stableEdgeId_trunc = str_trunc(stableEdgeId, 14, "right", "")) %>%
merge(aggregated_network_links[[.x]] %>%
mutate(network_link_ids_unnested_trunc = str_trunc(network_link_ids_unnested , 14, "right", ""))
,by.x = "stableEdgeId_trunc", by.y = "network_link_ids_unnested_trunc", all = T)
# summary_output = network_object_mrgd %>%
#   st_drop_geometry() %>%
#   count(stable_mis = !is.na(stableEdgeId)
#         ,network_mis = !is.na(network_link_ids_unnested)) %>%
#   mutate(flag = case_when(
#     (stable_mis == T & network_mis == T)~"Successful data matches"
#     ,(stable_mis == F & network_mis == T)~"Agg. table link present but no match in network object"
#     ,(stable_mis == T & network_mis == F)~"Network object link present but no match in agg. table"
#     ,T~"ERROR")) %>%
#   select(flag, count = n)
# message(str_glue("{paste0(capture.output(summary_output), collapse = '\n')}"))
})
#save out
{
list_objects = list(agg_link_flag = temp_object[[1]]
,agg_link_vehicle_type = temp_object[[2]]
,agg_link_vehicle_type_origin = temp_object[[3]])
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "network_link_aggregation_list.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects, file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
yolo = make_agg_network_shapefile_centroids(
location = "data/req_dev"
,folder = "data_20230125_162034"
)
make_agg_network_shapefile_links = function(location, folder, auto_save = F
,aggregate_object = NULL, network_link_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230125_162034'
if (is.null(aggregate_object)){
message("Aggregate network links objects will be made using aggregate tables located at folder and location...")
aggregated_network_links = here::here(location, folder, "aggregated_network_links.rds") %>%
read_rds()
replica_trip_origin_links = aggregated_network_links
} else {
message("Aggregate network links objects will be made using supplied aggregate table...")
aggregated_network_links = aggregate_object
}
if (is.null(network_link_object)){
message("You elected to use folder and location pointers to make spaital object...")
message("In addition, you elected to repersent network links as polylines....\nIf you wish to depict network as links as points using their centroids change 'use_centroids = T'")
network_link_object = here::here(location, folder, "replica_queried_network_links.gpkg") %>%
sf::read_sf()
} else {
message("network_link_object will be made using supplied network link object...")
network_object = network_link_object
}
message(str_glue("Making shapefiles by merging data centroids with aggregated count data{make_space('-')}"))
message("This may take awhile depending on the size of the network and count data")
temp_object = ("agg_link_flag", "agg_link_vehicle_type", "agg_link_vehicle_type_origin") %>%
map(~{
message(str_glue("Making {.x}...."))
network_object_mrgd = network_link_object %>%
mutate(stableEdgeId_trunc = str_trunc(stableEdgeId, 14, "right", "")) %>%
merge(aggregated_network_links[[.x]] %>%
mutate(network_link_ids_unnested_trunc = str_trunc(network_link_ids_unnested , 14, "right", ""))
,by.x = "stableEdgeId_trunc", by.y = "network_link_ids_unnested_trunc", all = T)
# summary_output = network_object_mrgd %>%
#   st_drop_geometry() %>%
#   count(stable_mis = !is.na(stableEdgeId)
#         ,network_mis = !is.na(network_link_ids_unnested)) %>%
#   mutate(flag = case_when(
#     (stable_mis == T & network_mis == T)~"Successful data matches"
#     ,(stable_mis == F & network_mis == T)~"Agg. table link present but no match in network object"
#     ,(stable_mis == T & network_mis == F)~"Network object link present but no match in agg. table"
#     ,T~"ERROR")) %>%
#   select(flag, count = n)
# message(str_glue("{paste0(capture.output(summary_output), collapse = '\n')}"))
})
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "network_link_aggregation_list.rds"))
}
#save out
{
list_objects = list(agg_link_flag = temp_object[[1]]
,agg_link_vehicle_type = temp_object[[2]]
,agg_link_vehicle_type_origin = temp_object[[3]])
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "network_link_aggregation_list.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects, file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
make_agg_network_shapefile_links = function(location, folder, auto_save = F
,aggregate_object = NULL, network_link_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230125_162034'
if (is.null(aggregate_object)){
message("Aggregate network links objects will be made using aggregate tables located at folder and location...")
aggregated_network_links = here::here(location, folder, "aggregated_network_links.rds") %>%
read_rds()
replica_trip_origin_links = aggregated_network_links
} else {
message("Aggregate network links objects will be made using supplied aggregate table...")
aggregated_network_links = aggregate_object
}
if (is.null(network_link_object)){
message("You elected to use folder and location pointers to make spaital object...")
message("In addition, you elected to repersent network links as polylines....\nIf you wish to depict network as links as points using their centroids change 'use_centroids = T'")
network_link_object = here::here(location, folder, "replica_queried_network_links.gpkg") %>%
sf::read_sf()
} else {
message("network_link_object will be made using supplied network link object...")
network_object = network_link_object
}
message(str_glue("Making shapefiles by merging data centroids with aggregated count data{make_space('-')}"))
message("This may take awhile depending on the size of the network and count data")
temp_object = c("agg_link_flag", "agg_link_vehicle_type", "agg_link_vehicle_type_origin") %>%
map(~{
message(str_glue("Making {.x}...."))
network_object_mrgd = network_link_object %>%
mutate(stableEdgeId_trunc = str_trunc(stableEdgeId, 14, "right", "")) %>%
merge(aggregated_network_links[[.x]] %>%
mutate(network_link_ids_unnested_trunc = str_trunc(network_link_ids_unnested , 14, "right", ""))
,by.x = "stableEdgeId_trunc", by.y = "network_link_ids_unnested_trunc", all = T)
# summary_output = network_object_mrgd %>%
#   st_drop_geometry() %>%
#   count(stable_mis = !is.na(stableEdgeId)
#         ,network_mis = !is.na(network_link_ids_unnested)) %>%
#   mutate(flag = case_when(
#     (stable_mis == T & network_mis == T)~"Successful data matches"
#     ,(stable_mis == F & network_mis == T)~"Agg. table link present but no match in network object"
#     ,(stable_mis == T & network_mis == F)~"Network object link present but no match in agg. table"
#     ,T~"ERROR")) %>%
#   select(flag, count = n)
# message(str_glue("{paste0(capture.output(summary_output), collapse = '\n')}"))
})
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "network_link_aggregation_list.rds"))
}
#save out
{
list_objects = list(agg_link_flag = temp_object[[1]]
,agg_link_vehicle_type = temp_object[[2]]
,agg_link_vehicle_type_origin = temp_object[[3]])
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "network_link_aggregation_list.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects, file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
yolo = make_agg_network_shapefile_links(
location = "data/req_dev"
,folder = "data_20230125_162034"
)
,aggregate_object = NULL, network_link_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230125_162034'
if (is.null(aggregate_object)){
message("Aggregate network links objects will be made using aggregate tables located at folder and location...")
aggregated_network_links = here::here(location, folder, "aggregated_network_links.rds") %>%
read_rds()
replica_trip_origin_links = aggregated_network_links
} else {
message("Aggregate network links objects will be made using supplied aggregate table...")
aggregated_network_links = aggregate_object
}
if (is.null(network_link_object)){
network_link_object = here::here(location, folder, "replica_queried_network_links.gpkg") %>%
sf::read_sf()
} else {
message("network_link_object will be made using supplied network link object...")
network_object = network_link_object
}
message(str_glue("Making shapefiles by merging data centroids with aggregated count data{make_space('-')}"))
message("This may take awhile depending on the size of the network and count data")
temp_object = c("agg_link_flag", "agg_link_vehicle_type", "agg_link_vehicle_type_origin") %>%
map(~{
message(str_glue("Making {.x}...."))
network_object_mrgd = network_link_object %>%
mutate(stableEdgeId_trunc = str_trunc(stableEdgeId, 14, "right", "")) %>%
merge(aggregated_network_links[[.x]] %>%
mutate(network_link_ids_unnested_trunc = str_trunc(network_link_ids_unnested , 14, "right", ""))
,by.x = "stableEdgeId_trunc", by.y = "network_link_ids_unnested_trunc", all = T)
# summary_output = network_object_mrgd %>%
#   st_drop_geometry() %>%
#   count(stable_mis = !is.na(stableEdgeId)
#         ,network_mis = !is.na(network_link_ids_unnested)) %>%
#   mutate(flag = case_when(
#     (stable_mis == T & network_mis == T)~"Successful data matches"
#     ,(stable_mis == F & network_mis == T)~"Agg. table link present but no match in network object"
#     ,(stable_mis == T & network_mis == F)~"Network object link present but no match in agg. table"
#     ,T~"ERROR")) %>%
#   select(flag, count = n)
# message(str_glue("{paste0(capture.output(summary_output), collapse = '\n')}"))
})
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "network_link_aggregation_list.rds"))
}
#save out
{
list_objects = list(agg_link_flag = temp_object[[1]]
,agg_link_vehicle_type = temp_object[[2]]
,agg_link_vehicle_type_origin = temp_object[[3]])
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "network_link_aggregation_list.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects, file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
make_agg_network_shapefile_links = function(location, folder, auto_save = F
,aggregate_object = NULL, network_link_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230125_162034'
if (is.null(aggregate_object)){
message("Aggregate network links objects will be made using aggregate tables located at folder and location...")
aggregated_network_links = here::here(location, folder, "aggregated_network_links.rds") %>%
read_rds()
replica_trip_origin_links = aggregated_network_links
} else {
message("Aggregate network links objects will be made using supplied aggregate table...")
aggregated_network_links = aggregate_object
}
if (is.null(network_link_object)){
network_link_object = here::here(location, folder, "replica_queried_network_links.gpkg") %>%
sf::read_sf()
} else {
message("network_link_object will be made using supplied network link object...")
network_object = network_link_object
}
message(str_glue("Making shapefiles by merging data centroids with aggregated count data{make_space('-')}"))
message("This may take awhile depending on the size of the network and count data")
temp_object = c("agg_link_flag", "agg_link_vehicle_type", "agg_link_vehicle_type_origin") %>%
map(~{
message(str_glue("Making {.x}...."))
network_object_mrgd = network_link_object %>%
mutate(stableEdgeId_trunc = str_trunc(stableEdgeId, 14, "right", "")) %>%
merge(aggregated_network_links[[.x]] %>%
mutate(network_link_ids_unnested_trunc = str_trunc(network_link_ids_unnested , 14, "right", ""))
,by.x = "stableEdgeId_trunc", by.y = "network_link_ids_unnested_trunc", all = T)
# summary_output = network_object_mrgd %>%
#   st_drop_geometry() %>%
#   count(stable_mis = !is.na(stableEdgeId)
#         ,network_mis = !is.na(network_link_ids_unnested)) %>%
#   mutate(flag = case_when(
#     (stable_mis == T & network_mis == T)~"Successful data matches"
#     ,(stable_mis == F & network_mis == T)~"Agg. table link present but no match in network object"
#     ,(stable_mis == T & network_mis == F)~"Network object link present but no match in agg. table"
#     ,T~"ERROR")) %>%
#   select(flag, count = n)
# message(str_glue("{paste0(capture.output(summary_output), collapse = '\n')}"))
})
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "network_link_aggregation_list.rds"))
}
#save out
{
list_objects = list(agg_link_flag = temp_object[[1]]
,agg_link_vehicle_type = temp_object[[2]]
,agg_link_vehicle_type_origin = temp_object[[3]])
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "network_link_aggregation_list.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects, file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
make_agg_network_shapefile_centroids = function(location, folder, auto_save = F
,aggregate_object = NULL, network_centroid_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230125_162034'
if (is.null(aggregate_object)){
message("Aggregate network links objects will be made using aggregate tables located at folder and location...")
aggregated_network_links = here::here(location, folder, "aggregated_network_links.rds") %>%
read_rds()
replica_trip_origin_links = aggregated_network_links
} else {
message("Aggregate network links objects will be made using supplied aggregate table...")
aggregated_network_links = aggregate_object
}
if (is.null(network_centroid_object)){
message("You elected to use folder and location pointers to make spaital object...")
# message("In addition, you elected to repersent network links as polylines....\nIf you wish to depict network as links as points using their centroids change 'use_centroids = T'")
network_centroid_object = here::here(location, folder, "replica_queried_network_cntds.gpkg") %>%
sf::read_sf()
} else {
message("Shapefile will be made using supplied network link object...")
network_centroid_object = network_centroid_object
}
message(str_glue("Making shapefiles by merging data centroids with aggregated count data{make_space('-')}"))
message("This may take awhile depending on the size of the network and count data")
temp_object = c("agg_link_flag", "agg_link_vehicle_type", "agg_link_vehicle_type_origin") %>%
map(~{
message(str_glue("Making {.x}...."))
network_object_mrgd = network_centroid_object %>%
mutate(stableEdgeId_trunc = str_trunc(stableEdgeId, 14, "right", "")) %>%
merge(aggregated_network_links[[.x]] %>%
mutate(network_link_ids_unnested_trunc = str_trunc(network_link_ids_unnested , 14, "right", ""))
,by.x = "stableEdgeId_trunc", by.y = "network_link_ids_unnested_trunc", all = T)
# summary_output = network_object_mrgd %>%
#   st_drop_geometry() %>%
#   count(stable_mis = !is.na(stableEdgeId)
#         ,network_mis = !is.na(network_link_ids_unnested)) %>%
#   mutate(flag = case_when(
#     (stable_mis == T & network_mis == T)~"Successful data matches"
#     ,(stable_mis == F & network_mis == T)~"Agg. table link present but no match in network object"
#     ,(stable_mis == T & network_mis == F)~"Network object link present but no match in agg. table"
#     ,T~"ERROR")) %>%
#   select(flag, count = n)
# message(str_glue("{paste0(capture.output(summary_output), collapse = '\n')}"))
})
#save out
{
list_objects = list(agg_link_flag = temp_object[[1]]
,agg_link_vehicle_type = temp_object[[2]]
,agg_link_vehicle_type_origin = temp_object[[3]])
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "network_link_aggregation_list.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects, file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
yolo = make_agg_network_shapefile_centroids(
location = "data/req_dev"
,folder = "data_20230125_162034"
)
yolo
yolo = make_agg_network_shapefile_links(
location = "data/req_dev"
,folder = "data_20230125_162034"
)
yolo
yolo = make_agg_network_shapefile_links(
aggregate_object = aggregated_network_links
,network_link_object = replica_queried_network_links
)
yolo
data("table_agg_by_link_subset_limited")
aggregate_network_links(
network_object = table_agg_by_link_subset_limited
,auto_save = F
)
aggregate_network_links(
network_object = table_agg_by_link_subset_limited
,location = "data/req_dev"
,folder = "data_20230125_162034"
,auto_save = T
)
#should be the same as *file_destination* input above
location = "data/req_dev"
#this is the folder that the data is written to
#it is a sub-folder to *file_destination* and will have a data_[datetime] format
folder = "data_20230125_162034"
here::here(location, folder, "aggregated_network_links.rds")
here::here(location, folder, "aggregated_network_links.rds") %>%
read_rds()
aggregated_network_links
location = "data/req_dev"
folder = 'data_20230117_092037'
aggregated_network_links = here(location, folder, 'aggregated_network_links') %>%
paste0(".rds")
aggregated_network_links
usethis::use_data(aggregated_network_links, overwrite = TRUE)
data('aggregated_network_links')
aggregated_network_links
devtools::load_all(".")
data('aggregated_network_links')
aggregated_network_links
here(location, folder, 'aggregated_network_links') %>%
paste0(".rds")
location = "data/req_dev"
folder = 'data_20230117_092037'
here(location, folder, 'aggregated_network_links')
here(location, folder, 'aggregated_network_links') %>%
paste0(".rds")
aggregated_network_links = here(location, folder, 'aggregated_network_links') %>%
paste0(".rds") %>%  read_rds()
usethis::use_data(aggregated_network_links, overwrite = TRUE)
data('aggregated_network_links')
aggregated_network_links
make_agg_network_shapefile_links(
location = location
,folder = folder
,auto_save = F
)
#this is the folder that the data is written to
#it is a sub-folder to *file_destination* and will have a data_[datetime] format
folder = "data_20230125_162034"
#this is the folder that the data is written to
#it is a sub-folder to *file_destination* and will have a data_[datetime] format
folder = "data_20230125_162034"
aggregate_network_links(
location = location
,folder = folder
,auto_save = F
)
data('aggregated_network_links')
data('replica_queried_network_links')
make_agg_network_shapefile_links(
aggregate_object = aggregated_network_links
,network_link_object = replica_queried_network_links
,auto_save = F
)
