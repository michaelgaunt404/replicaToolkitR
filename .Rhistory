#'
#' make_network_centroid_layer(
#'   location = "data/req_dev"
#'   ,folder = "data_20230106_154119"
#'   ,network_object = replica_queried_network_links
#'   ,auto_save = F
#' )
make_trip_origin_point_layer = function(location, folder, auto_save = F, network_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230117_092037'
if (is.null(network_object)){
message("Trip origin link centroids made using file and location...")
replica_trip_origin_links = here::here(location, folder, "replica_trip_origin_links.csv") %>%
data.table::fread()
replica_trip_origin_links = sf::st_as_sf(replica_trip_origin_links, coords = c('startLon', 'startLat'), crs = 4326)
} else {
message("Trip origin link centroids made using suplied network object...")
replica_trip_origin_links = replica_trip_origin_links
}
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "replica_trip_origin_links.gpkg"))
}
return(replica_trip_origin_links)
}
data("replica_trip_origin_links")
make_trip_origin_point_layer(
network_object = replica_trip_origin_links
,states = "WA"
,auto_save = F
)
make_trip_origin_point_layer(
network_object = replica_trip_origin_links
,auto_save = F
)
replica_trip_origin_links
make_trip_origin_point_layer(
network_object = replica_trip_origin_links
,auto_save = F
) %>%  head()
#' data('replica_queried_network_links')
#'
#' head(replica_queried_network_links)
#'
#' make_network_centroid_layer(
#'   location = "data/req_dev"
#'   ,folder = "data_20230106_154119"
#'   ,network_object = replica_queried_network_links
#'   ,auto_save = F
#' )
make_trip_origin_point_layer = function(location, folder, auto_save = F, network_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230117_092037'
if (is.null(network_object)){
message("Trip origin link centroids made using file and location...")
replica_trip_origin_links = here::here(location, folder, "replica_trip_origin_links.csv") %>%
data.table::fread()
replica_trip_origin_links = sf::st_as_sf(replica_trip_origin_links, coords = c('startLon', 'startLat'), crs = 4326)
} else {
message("Trip origin link centroids made using suplied network object...")
replica_trip_origin_links = replica_trip_origin_links
}
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "replica_trip_origin_links.gpkg"))
}
return(replica_trip_origin_links)
}
make_trip_origin_point_layer(
network_object = replica_trip_origin_links
,auto_save = F
)
#' data('replica_queried_network_links')
#'
#' head(replica_queried_network_links)
#'
#' make_network_centroid_layer(
#'   location = "data/req_dev"
#'   ,folder = "data_20230106_154119"
#'   ,network_object = replica_queried_network_links
#'   ,auto_save = F
#' )
make_trip_origin_point_layer = function(location, folder, auto_save = F, first_links_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230117_092037'
if (is.null(first_links_object)){
message("Trip origin link centroids made using file and location...")
replica_trip_origin_links = here::here(location, folder, "replica_trip_origin_links.csv") %>%
data.table::fread()
replica_trip_origin_links = sf::st_as_sf(replica_trip_origin_links, coords = c('startLon', 'startLat'), crs = 4326)
} else {
message("Trip origin link centroids made using suplied network object...")
replica_trip_origin_links = first_links_object
}
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "replica_trip_origin_links.gpkg"))
}
return(replica_trip_origin_links)
}
make_trip_origin_point_layer(
network_object = replica_trip_origin_links
,auto_save = F
) %>%  head()
make_trip_origin_point_layer(
first_links_object = replica_trip_origin_links
,auto_save = F
) %>%  head()
#' data('replica_queried_network_links')
#'
#' head(replica_queried_network_links)
#'
#' make_network_centroid_layer(
#'   location = "data/req_dev"
#'   ,folder = "data_20230106_154119"
#'   ,network_object = replica_queried_network_links
#'   ,auto_save = F
#' )
make_trip_origin_point_layer = function(location, folder, auto_save = F, first_links_object = NULL){
# location = "data/req_dev"
# folder = 'data_20230117_092037'
if (is.null(first_links_object)){
message("Trip origin link centroids made using file and location...")
replica_trip_origin_links = here::here(location, folder, "replica_trip_origin_links.csv") %>%
data.table::fread()
replica_trip_origin_links = sf::st_as_sf(replica_trip_origin_links, coords = c('startLon', 'startLat'), crs = 4326)
} else {
message("Trip origin link centroids made using suplied network object...")
replica_trip_origin_links = sf::st_as_sf(first_links_object, coords = c('startLon', 'startLat'), crs = 4326)
}
if (auto_save) {
sf::write_sf(replica_trip_origin_links, here::here(location, folder, "replica_trip_origin_links.gpkg"))
}
return(replica_trip_origin_links)
}
make_trip_origin_point_layer(
first_links_object = replica_trip_origin_links
,auto_save = F
) %>%  head()
location = "data/req_dev"
location = "data/req_dev"
folder = 'data_20230125_162034'
get_tigris_polys_from_replica_index(
location = location
,folder = folder
,states = "WA"
,auto_save = T
)
make_network_link_layer(
location = location
,folder = folder
,auto_save = T
)
make_network_centroid_layer(
location = location
,folder = folder
,auto_save = T
)
#' head(replica_queried_network_links)
#'
#' make_network_centroid_layer(
#'   location = "data/req_dev"
#'   ,folder = "data_20230106_154119"
#'   ,network_object = replica_queried_network_links
#'   ,auto_save = F
#' )
#'
#'
make_network_centroid_layer = function(location, folder, auto_save = F, network_object = NULL){
if (is.null(network_object)){
message("Centroids made using file and location...")
replica_queried_network = here::here(location, folder, "replica_queried_network_links.gpkg") %>%
sf::read_sf()
replica_queried_network_cntds = gauntlet::st_true_midpoint(replica_queried_network)
} else {
message("Centroids made using suplied network object...")
replica_queried_network_cntds = gauntlet::st_true_midpoint(network_object)
}
if (auto_save) {
sf::write_sf(replica_queried_network_cntds, here::here(location, folder, "replica_queried_network_cntds.gpkg"))
}
return(replica_queried_network_cntds)
}
make_network_centroid_layer(
location = location
,folder = folder
,auto_save = T
)
library(sf)
make_network_centroid_layer(
location = location
,folder = folder
,auto_save = T
)
make_trip_origin_point_layer(
location = location
,folder = folder
,auto_save = T
)
##make network link aggregations================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aggregate_network_links(
location = location
,folder = folder
,auto_save = T
)
##make network link aggregations================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aggregate_network_links(
location = location
,folder = folder
,auto_save = T
)
#' @return a data frame and/or saved RDS file
#' @export
#'
#' @examples
#'
#' #none
aggregate_network_links = function(location, folder, auto_save = F
,network_object = NULL){
#TODO:make this compatible with other polygon types
#TODO: review different aggregations - they dont make the most sense
# location = "data/req_dev"
# folder = "data_20230117_092037"
# network_object = NULL
# auto_save = F
if (is.null(network_object)){
message("Aggregations will be made using file and location...")
network_links = here::here(location, folder, "table_agg_by_link_subset_limited.csv") %>%
data.table::fread()
} else {
message("Aggregations will be made using supplied network object...")
network_links = network_object
}
#perfrom aggregations
{
message(str_glue("{make_space()}\nStarting aggreagtion by link and study area destination flag...."))
agg_link_flag = network_links %>%
count_percent_zscore_dt(
grp_c = c('network_link_ids_unnested', 'flag_sa_destination')
,grp_p = c('network_link_ids_unnested')
,col = 'count', rnd = 2)
message("Aggregation complete....")
message(str_glue("{make_space()}\nStarting aggreagtion by link and vehicle type...."))
agg_link_vehicle_type = network_links %>%
count_percent_zscore_dt(
grp_c = c('network_link_ids_unnested', 'vehicle_type')
,grp_p = c('network_link_ids_unnested')
,col = 'count', rnd = 2) %>%
.[,`:=`(count_nrm_prank = dgt2(percent_rank(count))
,count_nrm_mmax = dgt2(normalize_min_max(count)))
,by = .(vehicle_type)] %>%
.[,`:=`(ttl_count_link = sum(count)), by = .(network_link_ids_unnested)] %>%
.[,`:=`(ttl_count_link_nrm_mmax =  dgt2(normalize_min_max(ttl_count_link)))] %>%
data.frame() %>%
mutate(label = str_glue(
"Link No.: {network_link_ids_unnested}
<br>Total Link Volume: {ttl_count_link}
<br>Volume Min-Max norm.: {100*ttl_count_link_nrm_mmax}%
<hr>
Metrics Adj for Vehicle Type
<br>Link Volume: {count} ({100*dgt2(percent)}% of total)
<br>Volume Min-Max norm.: {100*count_nrm_mmax}%")) %>%
data.table()
message("Aggregation complete....")
message(str_glue("{make_space()}\nStarting aggreagtion by link, vehicle type, and originating poly...."))
agg_link_vehicle_type_origin = network_links %>%
count_percent_zscore_dt(
grp_c = c('origin_poly', 'network_link_ids_unnested', 'vehicle_type')
,grp_p = c('origin_poly', 'network_link_ids_unnested')
,col = 'count', rnd = 2) %>%
.[order(origin_poly, network_link_ids_unnested)] %>%
.[,`:=`(count_nrm_prank = dgt2(percent_rank(count))
,count_nrm_mmax = dgt2(normalize_min_max(count)))
,by = .(origin_poly, vehicle_type)] %>%
.[,`:=`(ttl_count_orgin = sum(count)), by = .(origin_poly)] %>%
.[,`:=`(ttl_count_orgin_type = sum(count)), by = .(origin_poly, vehicle_type)] %>%
# .[,`:=`(ttl_count_orgin_type_other = ttl_count_orgin-ttl_count_orgin_type
#         ,ttl_count_orgin_type_per = ttl_count_orgin_type/ttl_count_orgin)] %>%
data.frame() %>%
mutate(label = str_glue(
"Origin: {origin_poly}
<br>Total Trips from Origin: {ttl_count_orgin}
<br>By Vehicle Type: {vehicle_type} ttl_count_orgin_type (100*{ttl_count_orgin_type/ttl_count_orgin}%)
<hr>
Link Metrics (for vehicle type and origin):
<br>Link Volume: {count}
<br>Volume Min-Max norm.: {100*count_nrm_mmax}%")) %>%
data.table()
message("Aggregation complete....")
}
#save out
{
list_objects = list(agg_link_flag = agg_link_flag
,agg_link_vehicle_type = agg_link_vehicle_type
,agg_link_vehicle_type_origin = agg_link_vehicle_type_origin)
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "aggregated_network_links.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects,file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
##make network link aggregations================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aggregate_network_links(
location = location
,folder = folder
,auto_save = T
)
usethis::use_package("data.table")
library(data.table)
##make network link aggregations================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aggregate_network_links(
location = location
,folder = folder
,auto_save = T
)
library(data.table)
##make network link aggregations================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aggregate_network_links(
location = location
,folder = folder
,auto_save = T
)
#' @return a data frame and/or saved RDS file
#' @export
#'
#' @examples
#'
#' #none
aggregate_network_links = function(location, folder, auto_save = F
,network_object = NULL){
#TODO:make this compatible with other polygon types
#TODO: review different aggregations - they dont make the most sense
# location = "data/req_dev"
# folder = "data_20230117_092037"
# network_object = NULL
# auto_save = F
if (is.null(network_object)){
message("Aggregations will be made using file and location...")
network_links = here::here(location, folder, "table_agg_by_link_subset_limited.csv") %>%
data.table::fread()
} else {
message("Aggregations will be made using supplied network object...")
network_links = network_object
}
#perfrom aggregations
{
message(str_glue("{make_space()}\nStarting aggreagtion by link and study area destination flag...."))
agg_link_flag = network_links %>%
count_percent_zscore_dt(
grp_c = c('network_link_ids_unnested', 'flag_sa_destination')
,grp_p = c('network_link_ids_unnested')
,col = 'count', rnd = 2)
message("Aggregation complete....")
message(str_glue("{make_space()}\nStarting aggreagtion by link and vehicle type...."))
agg_link_vehicle_type = network_links %>%
count_percent_zscore_dt(
grp_c = c('network_link_ids_unnested', 'vehicle_type')
,grp_p = c('network_link_ids_unnested')
,col = 'count', rnd = 2) %>%
.[,`:=`(count_nrm_prank = dgt2(percent_rank(count))
,count_nrm_mmax = dgt2(normalize_min_max(count)))
,by = .(vehicle_type)] %>%
.[,`:=`(ttl_count_link = sum(count)), by = .(network_link_ids_unnested)] %>%
.[,`:=`(ttl_count_link_nrm_mmax =  dgt2(normalize_min_max(ttl_count_link)))] %>%
data.frame() %>%
mutate(label = str_glue(
"Link No.: {network_link_ids_unnested}
<br>Total Link Volume: {ttl_count_link}
<br>Volume Min-Max norm.: {100*ttl_count_link_nrm_mmax}%
<hr>
Metrics Adj for Vehicle Type
<br>Link Volume: {count} ({100*dgt2(percent)}% of total)
<br>Volume Min-Max norm.: {100*count_nrm_mmax}%")) %>%
data.table()
message("Aggregation complete....")
message(str_glue("{make_space()}\nStarting aggreagtion by link, vehicle type, and originating poly...."))
agg_link_vehicle_type_origin = network_links %>%
count_percent_zscore_dt(
grp_c = c('origin_poly', 'network_link_ids_unnested', 'vehicle_type')
,grp_p = c('origin_poly', 'network_link_ids_unnested')
,col = 'count', rnd = 2) %>%
.[order(origin_poly, network_link_ids_unnested)] %>%
.[,`:=`(count_nrm_prank = dgt2(percent_rank(count))
,count_nrm_mmax = dgt2(normalize_min_max(count)))
,by = .(origin_poly, vehicle_type)] %>%
.[,`:=`(ttl_count_orgin = sum(count)), by = .(origin_poly)] %>%
.[,`:=`(ttl_count_orgin_type = sum(count)), by = .(origin_poly, vehicle_type)] %>%
# .[,`:=`(ttl_count_orgin_type_other = ttl_count_orgin-ttl_count_orgin_type
#         ,ttl_count_orgin_type_per = ttl_count_orgin_type/ttl_count_orgin)] %>%
data.frame() %>%
mutate(label = str_glue(
"Origin: {origin_poly}
<br>Total Trips from Origin: {ttl_count_orgin}
<br>By Vehicle Type: {vehicle_type} ttl_count_orgin_type (100*{ttl_count_orgin_type/ttl_count_orgin}%)
<hr>
Link Metrics (for vehicle type and origin):
<br>Link Volume: {count}
<br>Volume Min-Max norm.: {100*count_nrm_mmax}%")) %>%
data.table()
message("Aggregation complete....")
}
#save out
{
list_objects = list(agg_link_flag = agg_link_flag
,agg_link_vehicle_type = agg_link_vehicle_type
,agg_link_vehicle_type_origin = agg_link_vehicle_type_origin)
if (auto_save) {
message("You elected to automatically save the returned list object!")
file = here::here(location, folder, "aggregated_network_links.rds")
message(str_glue("It is saved at this location:\n{file}"))
saveRDS(list_objects,file)
} else {
message("You did not elect to automatically save the returned list object!")
}
}
return(list_objects)
}
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
data.table::data.table() %>%
.[,.(count = sum(.SD)), .SDcols = col, by = grp_c] %>%
.[,`:=`(percent = (count/sum(count)) %>%
{ if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
{ if (cntr_scl) (.) %>%
.[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
else .}
if (is.null(prefix)){
tmp = tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
return(tmp)
}
##make network link aggregations================================================
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
aggregate_network_links(
location = location
,folder = folder
,auto_save = T
)
study_area_network = here(location, 'study_area_network') %>%
paste0(".shp") %>%  read_sf() %>%  st_transform(crs = 4326)
usethis::use_data(study_area_network, overwrite = TRUE)
poi_list = here(location, 'poi_list') %>%
paste0(".csv") %>%  read.csv()
usethis::use_data(poi_list, overwrite = TRUE)
location
poi_list = here(location, 'poi_list') %>%
paste0(".csv") %>%  read.csv()
library(here)
poi_list = here(location, 'poi_list') %>%
paste0(".csv") %>%  read.csv()
usethis::use_data(poi_list, overwrite = TRUE)
acquired_sa_polys = here(location, folder, 'acquired_sa_polys') %>%
paste0(".gpkg") %>%  read_sf() %>%  st_transform(crs = 4326)
usethis::use_data(acquired_sa_polys, overwrite = TRUE)
aggregated_network_links = here(location, folder, 'aggregated_network_links') %>%
paste0(".rds")
usethis::use_data(aggregated_network_links, overwrite = TRUE)
replica_queried_network = here(location, folder, 'replica_queried_network') %>%
paste0(".csv") %>%  read.csv()
usethis::use_data(replica_queried_network, overwrite = TRUE)
replica_queried_network_cntds = here(location, folder, 'replica_queried_network_cntds') %>%
paste0(".gpkg") %>%  read_sf() %>%  st_transform(crs = 4326)
usethis::use_data(replica_queried_network_cntds, overwrite = TRUE)
replica_queried_network_links = here(location, folder, 'replica_queried_network_links') %>%
paste0(".gpkg") %>%  read_sf() %>%  st_transform(crs = 4326)
usethis::use_data(replica_queried_network_links, overwrite = TRUE)
replica_sa_poly_index = here(location, folder, 'replica_sa_poly_index') %>%
paste0(".csv") %>%  read.csv()
usethis::use_data(replica_sa_poly_index, overwrite = TRUE)
replica_trip_origin_destination = here(location, folder, 'replica_trip_origin_destination') %>%
paste0(".csv") %>%  read.csv()
usethis::use_data(replica_trip_origin_destination, overwrite = TRUE)
replica_trip_origin_links = here(location, folder, 'replica_trip_origin_links') %>%
paste0(".csv") %>%  read.csv()
usethis::use_data(replica_trip_origin_links, overwrite = TRUE)
replica_trip_origin_links_gpkg = here(location, folder, 'replica_trip_origin_links') %>%
paste0(".gpkg") %>%  read_sf() %>%  st_transform(crs = 4326)
usethis::use_data(replica_trip_origin_links_gpkg, overwrite = TRUE)
table_agg_by_link_subset_limited = here(location, folder, 'table_agg_by_link_subset_limited') %>%
paste0(".csv") %>%  read.csv()
usethis::use_data(table_agg_by_link_subset_limited, overwrite = TRUE)
library(replicaToolkitR)
devtools::document()
library(replicaToolkitR)
location = "data/req_dev"
folder = 'data_20230117_092037'
crs  = 32610
bb_sa_layer = read_sf(here(location, 'study_area_network.shp'))
replica_trip_origin_links_file = here(location, folder, "replica_trip_origin_links.gpkg")
replica_trip_origin_links = read_sf(replica_trip_origin_links_file)
replica_trip_origin_links_fltrd = replica_trip_origin_links %>%
st_filter(bb_sa_layer) %>%
st_transform(crs = 32610)
usethis::use_pkgdown_github_pages()
gh_token_help()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
